System Calls handler Documentation
-Joseph Hinz

initialization

bootloader initializes the syscall array
each entry is the function pointer for that syscall


	syscall_functions[0] = internal_dummy_syscall;
	syscall_functions[1] = internal_malloc;
	syscall_functions[2] = internal_free;
	syscall_functions[3] = internal_send;
	syscall_functions[4] = internal_get_reply;
	syscall_functions[5] = internal_wait_for_send;
	syscall_functions[6] = internal_receive;
	syscall_functions[7] = internal_reply;
	syscall_functions[8] = internal_getpid;
	syscall_functions[9] = internal_getppid;
	syscall_functions[10] = internal_create_process;
	syscall_functions[11] = internal_waitpid;
	syscall_functions[12] = internal_exit;
	syscall_functions[13] = internal_sleep;
	syscall_functions[14] = internal_yield;
	syscall_functions[15] = internal_gettime;

syscalls implementation
-handled similarly to interrupts
when a syscall is invoked the syscall number is put into r0
and the arguments are put into r1-5
the svc handler is then called, which causes an exception
and jumps to the svc handler in svc mode

handler:
1. save context
2. get the syscall number and arguments off the stack
3. uses the syscall_functions table and uses the numbers and argument
   to invoke the syscall itself
4. puts the return value into r0 and r1 (it's 64 bits)
5. restores the context to the process (goes back to user mode)